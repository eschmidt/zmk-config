/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/*
 * Temporarily here because nice nano v2 spi is not defined on ZMk Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

#include <dt-bindings/led/led.h>
&spi1 {
	compatible = "nordic,nrf-spim";
	status = "okay";
	mosi-pin = <6>;
	// Unused pins, needed for SPI definition, but not used by the ws2812 driver itself.
	sck-pin = <5>;
	miso-pin = <7>;

	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";
		label = "WS2812";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */
		spi-max-frequency = <4000000>;

		/* WS2812 */
		chain-length = <11>; /* arbitrary; change at will */
		spi-one-frame = <0x70>;
		spi-zero-frame = <0x40>;
		color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
	};
};

/ {
	chosen {
		zmk,underglow = &led_strip;
	};
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | `    |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// |  TAB |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | \    |
//                    | LCMD | LWR | SPC |   | ENT | RSE  | RALT |
                        bindings = <
   &kp GRAVE &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp TAB   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp BSLH
                  &kp LCMD &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |     |     |  -  |  _  |     |   |     |  +  |  =  |     |     |      |
// |      |  <  |  [  |  (  |  {  |     |   |     |  }  |  )  |  ]  |  >  |      |
// |      |     |     |     |     |     |   |     | LFT |  UP | DWN | RGT |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &kp ESC    &trans  &trans    &kp MINUS  &kp UNDER  &trans   &trans  &kp PLUS  &kp EQUAL  &trans    &trans     &trans
   &trans     &kp LT  &kp LBKT  &kp LPAR   &kp LBRC   &trans   &trans  &kp RBRC  &kp RPAR   &kp RBKT  &kp GT     &trans
   &trans     &trans  &trans    &trans     &trans     &trans   &trans  &kp LEFT  &kp UP     &kp DOWN  &kp RIGHT  &trans
                          	    &trans     &trans     &trans   &trans  &trans    &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |     |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
// |     |     |     |     |     |     |   |  =  |  4  |  5  |  6  |  *  |  +  |
// |     |     |     |     |     |     |   |     |  1  |  2  |  3  |  /  |  -  |
//                   |     |     |     |   |     |     |  0  |
                        bindings = <
   &trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6     &kp N7  &kp N8  &kp N9 &kp N0    &trans
   &trans  &trans  &trans  &trans  &trans  &trans  &kp EQUAL  &kp N4  &kp N5  &kp N6 &kp STAR  &kp PLUS
   &trans  &trans  &trans  &trans  &trans  &trans  &trans     &kp N1  &kp N2  &kp N3 &kp FSLH  &kp MINUS
                    	   &trans  &trans  &trans  &trans     &trans  &kp N0
                        >;
                };
        };
};
